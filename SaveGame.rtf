{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using System.Collections;\
using System.Collections.Generic;\
using UnityEngine;\
using System.IO;\
using System.Runtime.Serialization.Formatters.Binary;\
\
public class SaveManager : MonoBehaviour\
\{\
    public static SaveManager instance;\
\
    public PlayerData playerData;\
\
    private string savePath;\
\
    private void Awake()\
    \{\
        if (instance == null)\
        \{\
            instance = this;\
            DontDestroyOnLoad(gameObject);\
        \}\
        else\
        \{\
            Destroy(gameObject);\
        \}\
\
        savePath = Application.persistentDataPath + "/save.dat";\
        LoadGame();\
    \}\
\
    private void OnApplicationQuit()\
    \{\
        SaveGame();\
    \}\
\
    public void SaveGame()\
    \{\
        BinaryFormatter formatter = new BinaryFormatter();\
        FileStream file = File.Create(savePath);\
\
        playerData.lastSavedTime = System.DateTime.Now;\
\
        formatter.Serialize(file, playerData);\
        file.Close();\
\
        Debug.Log("Game saved.");\
    \}\
\
    public void LoadGame()\
    \{\
        if (File.Exists(savePath))\
        \{\
            BinaryFormatter formatter = new BinaryFormatter();\
            FileStream file = File.Open(savePath, FileMode.Open);\
\
            playerData = (PlayerData)formatter.Deserialize(file);\
\
            file.Close();\
\
            Debug.Log("Game loaded.");\
        \}\
        else\
        \{\
            playerData = new PlayerData();\
            Debug.Log("No save file found.");\
        \}\
    \}\
\
    public void BackupSave()\
    \{\
        BinaryFormatter formatter = new BinaryFormatter();\
        FileStream file = File.Create(Application.persistentDataPath + "/backup.dat");\
\
        formatter.Serialize(file, playerData);\
        file.Close();\
\
        Debug.Log("Backup save created.");\
    \}\
\}\
\
[System.Serializable]\
public class PlayerData\
\{\
    public int coins;\
    public List<Achievement> achievements;\
    public List<LevelPack> levelPacks;\
    public System.DateTime lastSavedTime;\
\}\
}