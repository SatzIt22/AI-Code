{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 public class PlayerController : MonoBehaviour \{\
\
    public float moveSpeed;\
    public float jumpForce;\
    public float gravityScale;\
\
    public List<GameObject> characters;\
    private int selectedCharacterIndex;\
\
    private Vector3 moveDirection;\
    private CharacterController controller;\
\
    private int currentLives;\
    private List<GameObject> lives;\
\
    private void Start() \{\
        controller = GetComponent<CharacterController>();\
        lives = new List<GameObject>();\
        currentLives = 1; // Start with one life\
    \}\
\
    private void Update() \{\
        float horizontalInput = Input.GetAxis("Horizontal");\
        float verticalInput = Input.GetAxis("Vertical");\
\
        moveDirection = new Vector3(horizontalInput, 0f, verticalInput) * moveSpeed;\
\
        if (controller.isGrounded) \{\
            moveDirection.y = 0f;\
\
            if (Input.GetButtonDown("Jump")) \{\
                moveDirection.y = jumpForce;\
            \}\
        \}\
\
        moveDirection.y += Physics.gravity.y * gravityScale * Time.deltaTime;\
        controller.Move(moveDirection * Time.deltaTime);\
    \}\
\
    public void SelectCharacter(int index) \{\
        if (index >= 0 && index < characters.Count) \{\
            selectedCharacterIndex = index;\
\
            // Activate the selected character and deactivate all others\
            for (int i = 0; i < characters.Count; i++) \{\
                if (i == selectedCharacterIndex) \{\
                    characters[i].SetActive(true);\
                \} else \{\
                    characters[i].SetActive(false);\
                \}\
            \}\
        \}\
    \}\
\
    public void AddLife() \{\
        currentLives++;\
        // Add a new life object to the list\
        GameObject life = Instantiate(Resources.Load("Life")) as GameObject;\
        life.transform.SetParent(GameObject.Find("LivesPanel").transform, false);\
        lives.Add(life);\
    \}\
\
    public void RemoveLife() \{\
        currentLives--;\
        // Remove the last life object from the list\
        if (lives.Count > 0) \{\
            GameObject life = lives[lives.Count - 1];\
            lives.Remove(life);\
            Destroy(life);\
        \}\
    \}\
\
    public bool HasLives() \{\
        // Check if the player has any lives left\
        return currentLives > 0;\
    \}\
\
    public void ResetLives() \{\
        // Reset the number of lives and the life objects\
        currentLives = 1;\
        foreach (GameObject life in lives) \{\
            Destroy(life);\
        \}\
        lives.Clear();\
        AddLife(); // Add the initial life object\
    \}\
\
\}\
}