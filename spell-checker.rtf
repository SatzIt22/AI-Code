{\rtf1\ansi\ansicpg1252\cocoartf2761
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 import java.io.File;\
import java.io.FileNotFoundException;\
import java.util.Scanner;\
import java.util.Set;\
import java.util.HashSet;\
\
public class SimpleSpellChecker \{\
\
  public static void main(String[] args) throws FileNotFoundException \{\
    // Replace "dictionary.txt" with your actual dictionary file path\
    Set<String> dictionary = loadDictionary("dictionary.txt");\
    String text = readTextFile("text.txt");\
\
    String correctedText = spellCheck(text, dictionary);\
    System.out.println("Corrected Text:");\
    System.out.println(correctedText);\
  \}\
\
  // Loads dictionary words into a Set\
  private static Set<String> loadDictionary(String filePath) throws FileNotFoundException \{\
    Set<String> dictionary = new HashSet<>();\
    Scanner scanner = new Scanner(new File(filePath));\
    while (scanner.hasNextLine()) \{\
      dictionary.add(scanner.nextLine().toLowerCase());\
    \}\
    scanner.close();\
    return dictionary;\
  \}\
\
  // Reads text from a file\
  private static String readTextFile(String filePath) throws FileNotFoundException \{\
    StringBuilder textBuilder = new StringBuilder();\
    Scanner scanner = new Scanner(new File(filePath));\
    while (scanner.hasNextLine()) \{\
      textBuilder.append(scanner.nextLine() + "\\n");\
    \}\
    scanner.close();\
    return textBuilder.toString();\
  \}\
\
  // Basic spell checking (replace with more sophisticated algorithms)\
  private static String spellCheck(String text, Set<String> dictionary) \{\
    StringBuilder correctedText = new StringBuilder();\
    String[] words = text.split("\\\\W+"); // Split by non-word characters\
    for (String word : words) \{\
      if (dictionary.contains(word.toLowerCase())) \{\
        correctedText.append(word + " ");\
      \} else \{\
        // Suggestion logic can be added here (e.g., closest word in dictionary)\
        correctedText.append("[" + word + "] ");\
      \}\
    \}\
    return correctedText.toString().trim();\
  \}\
\}\
}