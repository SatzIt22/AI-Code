{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using System.Collections;\
using System.Collections.Generic;\
using UnityEngine;\
using UnityEngine.SceneManagement;\
\
public class PauseMenu : MonoBehaviour\
\{\
    public GameObject pauseMenuUI;\
    public bool isPaused;\
    public GameObject settingsMenuUI;\
    public Button backButton;\
    public SaveManager savepoint;\
\
    private void Start()\
    \{\
        isPaused = false;\
    \}\
\
    private void Update()\
    \{\
        if (Input.GetKeyDown(KeyCode.Escape) || Input.GetButtonDown("Start"))\
        \{\
            if (isPaused)\
            \{\
                ResumeGame();\
            \}\
            else\
            \{\
                PauseGame();\
            \}\
        \}\
    \}\
\
    public void ResumeGame()\
    \{\
        Time.timeScale = 1f;\
        pauseMenuUI.SetActive(false);\
        //exit out all other UI menus\
        isPaused = false;\
    \}\
\
    public void OpenTutorial()\
    \{\
        // Implement tutorial logic here\
    \}\
\
    public void TattleLog()\
    \{\
        //Call a tattle log depending on which scene is active\
        //Check if tattle log has been seen, if not, unlock it in the Shop Notebook\
    \}\
\
    public void RetryLevel()\
    \{\
        //only make visible if retry is viable\
        //remove 1 life when possible\
        SceneManager.LoadScene(SceneManager.GetActiveScene().name);\
    \}\
\
    public void ViewStage()\
    \{\
        // Implement stage viewing logic here\
    \}\
\
    public void settingsMenu()\
    \{\
        settingsMenuUI.SetActive(true);\
        //Import settings logic here (import from main menu)\
    \}\
\
    public void QuitGame()\
    \{\
        //If arcade mode is active, ask to set a save point\
        Application.Quit();\
    \}\
\
    public void setSave()\
    \{\
        //Implement save-point logic here. Each save point costs a set currency\
        //make sure to assign the SaveManager script to an invisible object in the pause menu\
        savepoint.SaveGame();\
    \}\
\
    public void Back()\
    \{\
        //if any non-pause menu UI is active, exit out of it\
        backButton.gameObject.SetActive(false);\
    \}\
\
    private void PauseGame()\
    \{\
        Time.timeScale = 0f;\
        pauseMenuUI.SetActive(true);\
        isPaused = true;\
    \}\
\}\
}