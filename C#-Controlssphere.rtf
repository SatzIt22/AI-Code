{\rtf1\ansi\ansicpg1252\cocoartf2708
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 using UnityEngine;\
\
public class SphereMovement : MonoBehaviour\
\{\
    public float moveSpeed = 5f; // the speed at which the sphere moves\
    public float jumpForce = 10f; // the force with which the sphere jumps\
    public LayerMask groundLayer; // the layer on which the ground is placed\
    public float groundCheckDistance = 0.1f; // the distance below the sphere to check for ground\
\
    private Rigidbody sphereRigidbody; // the Rigidbody component of the sphere\
    private bool isGrounded; // whether the sphere is currently grounded\
\
    private void Start()\
    \{\
        sphereRigidbody = GetComponent<Rigidbody>();\
    \}\
\
    private void FixedUpdate()\
    \{\
        // get the movement input from the controller\
        float horizontalInput = Input.GetAxis("Horizontal");\
        float verticalInput = Input.GetAxis("Vertical");\
        Vector3 movementDirection = new Vector3(horizontalInput, 0f, verticalInput).normalized;\
        Vector3 movement = movementDirection * moveSpeed * Time.fixedDeltaTime;\
        Move(movement);\
\
        // check if the sphere is grounded\
        isGrounded = Physics.CheckSphere(transform.position, groundCheckDistance, groundLayer);\
\
        // jump if the sphere is grounded and the jump button is pressed\
        if (isGrounded && Input.GetButtonDown("Jump"))\
        \{\
            Jump();\
        \}\
    \}\
\
    private void Move(Vector3 movement)\
    \{\
        // calculate the desired position of the sphere after moving\
        Vector3 targetPosition = sphereRigidbody.position + movement;\
\
        // check for collisions with other objects\
        Collider[] colliders = Physics.OverlapSphere(targetPosition, sphereRigidbody.GetComponent<SphereCollider>().radius);\
        foreach (Collider collider in colliders)\
        \{\
            if (collider.gameObject != gameObject)\
            \{\
                // if a collision occurs, stop moving in that direction\
                movement = Vector3.zero;\
                break;\
            \}\
        \}\
\
        // move the sphere using the Rigidbody component\
        sphereRigidbody.MovePosition(sphereRigidbody.position + movement);\
    \}\
\
    private void Jump()\
    \{\
        // apply an upward force to the sphere\
        sphereRigidbody.AddForce(Vector3.up * jumpForce, ForceMode.Impulse);\
    \}\
\}\
}